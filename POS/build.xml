<!-- TODO: Define classpaths in one place. Right now, classpath definitions are scattered and inconsistent. -->
<!-- NOTES FOR FUTURE:
	1) Paths must be declared in global properties. Other solutions will not work
	2) arg values must be given separately - one-liners will only cause errors
	3) Due to different setup, out-of-box solutions (e.g from Tarkvaratehnika) will not work
	-->

	<project name="POS" default="dist" basedir=".">
    <description>
        The Four Horsemen POS project ANT build file
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="build" location="build"/>
  <property name="dist"  location="dist"/>
  <property name="lib.dir" value="lib" />
		
  <!-- database global properties -->
  <property name="data.dir"	value="${basedir}/data"/>
  <property name="db.file"	value="${data.dir}/POSdb"/>
  <property name="db.alias"	value="POS"/>
  <property name="db.url" 	value="jdbc:hsqldb:hsql://localhost/POSdb"/>
  <property name="lib.hibernate.dir"   value="${lib.dir}/hibernate"/>
		
    <!-- Classpath declaration. -->
    <path id="lib.class.path">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>
	
	<!-- Compilation classpath -->
	<path id="compile.classpath">
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
		<!-- These lines seem to be very important -->
        <fileset dir="${lib.hibernate.dir}">
             <include name="*.jar"/>
        </fileset>
	 </path>
	
	<!-- An attempt for database classpath declarations - seems to work for now -->
	<path id="run.classpath">
        <pathelement location="${build.classes.dir}"/>
        <!-- configuration -->
        <pathelement location="${conf.dir}"/>
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>

        <fileset dir="${lib.hibernate.dir}">
             <include name="*.jar"/>
        </fileset>
	</path>
	
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  	<!-- Update application.properties -->
  </target>

  <target name="build" depends="init"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
  	<javac srcdir="${src}" destdir="${build}">
  		<classpath path="${build}">
			<pathelement path="lib/log4j-1.2.17.jar"/>
  			<pathelement path="lib/jgoodies-common-1.6.0.jar"/>
  			<pathelement path="lib/jgoodies-looks-2.5.3.jar"/>
		</classpath>
  	</javac>
  	
    <!--set log4j and other files in the right places -->
  </target>
		
	<target name="runc" depends="build" description="Run the application (console)">
		<java classname="ee.ut.math.tvt.thefourhorsemen.Intro" fork="yes">
			<classpath path="${build}">
				<pathelement path="lib/log4j-1.2.17.jar"/>
				<pathelement path="etc"/>
			</classpath>
			<arg value="console" />
		</java>
	</target>
	
	<target name="run" depends="build" description="run the application" >
	    <!-- Run the Intro class -->
		<java classname="ee.ut.math.tvt.thefourhorsemen.Intro"
			fork="true">
			<classpath path="${build}">
				<pathelement path="lib/log4j-1.2.17.jar"/>
				<pathelement path="lib/jgoodies-common-1.6.0.jar"/>
				<pathelement path="lib/jgoodies-looks-2.5.3.jar"/>
				<pathelement path="etc"/>
			</classpath>
			<jvmarg value="-Xdebug" />
			<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044" />
		</java>
	  </target>
	
	<target name="jrun" depends="build">
		<java jar="${build}/jar/thefourhorsemen.jar"
			fork="true" />
	</target>

  <target name="dist" depends="build"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${build}/jar"/>

    <!-- Create manifest file if necessary -->
  	<manifestclasspath property="lib.list" jarfile="${build}/jar/thefourhorsemen.jar">
  		<classpath path="${build}">
			<pathelement path="lib/log4j-1.2.17.jar"/>
			<pathelement path="etc"/>
		</classpath>
  	</manifestclasspath>
  	<manifest file="${build}/MANIFEST.MF">
  		<attribute name="Main-Class" value="ee/ut/math/tvt/thefourhorsemen/Intro" />
  		<attribute name="Class-Path" value="${lib.list}"/>
  	</manifest>
  	
  	<!-- Put everything in ${build} into the jar file-->
    <jar jarfile="${build}/jar/thefourhorsemen.jar"
    	manifest="${build}/MANIFEST.MF"
    	basedir="${build}"
    	excludes="jar/thefourhorsemen.jar">
  	</jar>
  	
  	<!-- update properties where necessary -->
	<propertyfile file="version.properties" comment = "Version properties">
		<entry  key="build.minor.number" type="int" default="0"/>
		<entry  key="build.major.number" type="int" default="0"/>
		<entry  key="build.revision.number" type="int" default="0" operation="+"/>
	</propertyfile>
	
	<!-- read properties file -->
	<loadproperties srcFile="version.properties"/>
	
	<propertyfile file="version.properties" comment = "Version properties">
		<entry  key="build.number" operation="=" value="${build.major.number}.${build.minor.number}.${build.revision.number}"/>
	</propertyfile>
  </target>

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
    <delete dir="${dist}"/>
  </target>
		
	<target name="git_commit">
		<!-- Prompt for commit message -->
		<input message="Commit message:" addproperty="commit-message" />
		<!-- Add all changed files to commit -->
		<exec executable="git">
			<arg value="add"/>
			<arg value="-A"/>
			<arg value=":/"/>
		</exec>
		<!-- Commit changes -->
		<exec executable="git">
			<arg value="commit"/>
			<arg value="-m"/>
			<arg value="${commit-message}"/>
		</exec>
		
		<!-- Prompt for username and password-->
		<input message="Username:" addproperty="commit-username" />
		<input message="Password:" addproperty="commit-password"/>
		
		<!-- Push to GitHub -->
		<exec executable="git">
			<arg value="push"/>
			<arg value="https://${commit-username}:${commit-password}@github.com/andoh/the-4-horsemen.git"/>
			<arg value="master"/>
		</exec>
	</target>
		
		<target name="git_tag">
			<!-- Prompt for tag name and comment-->
			<input message="Tag name:" addproperty="tag-name" />
			<input message="Comment:" addproperty="tag-comment" />
			<!-- Add all changed files to commit -->
			<exec executable="git">
				<arg value="tag"/>
				<arg value="-a"/>
				<arg value="${tag-name}"/>
				<arg value="-m"/>
				<arg value="${tag-comment}"/>
			</exec>
			
			<!-- Prompt for username and password-->
			<input message="Username:" addproperty="commit-username" />
			<input message="Password:" addproperty="commit-password"/>
			
			<!-- Push to GitHub -->
			<exec executable="git">
				<arg value="push"/>
				<arg value="--tags"/>
				<arg value="https://${commit-username}:${commit-password}@github.com/andoh/the-4-horsemen.git"/>
				<arg value="master"/>
			</exec>
		</target>
		
	  	<!-- Start the HSQL DB server -->
	  	<target name="startdb" description="Run HSQL database server with clean DB">
	  	    <!-- Delete database files -->
	  	    <!--delete dir="${database.dir}" /-->
	  	    <java classname="org.hsqldb.Server" fork="yes" classpathref="run.classpath" failonerror="true">
	  	    	<!--arg value="-database.0 '${db.file}'" /-->
	  	    	<!--arg value="-dbname.0 '${db.alias}'" /-->
	  	        <arg value="-database.0" />
	  	    	<arg value="${db.file}" />
	  	        <!--arg value="file:${database.dir}/db" /-->
	  	    </java>
	  	</target>
		
		<!-- Start the HSQL DB browser tool -->
		<target name="dbManager" description="Start HSQL DB manager">
		    <java classname="org.hsqldb.util.DatabaseManagerSwing" fork="yes" classpathref="run.classpath" failonerror="true">
		        <arg value="--user" />
		    	<arg value="sa" />
		    	<arg value="--url" />
		    	<arg value="${db.url}" />
		    </java>
		</target>

</project>